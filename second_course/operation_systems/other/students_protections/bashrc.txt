# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias jobs='jobs'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# пользовательская инъекция
source .custom_aliases
export count=0
for i in $(who | awk '{print $1}' | sort | uniq)
do
count=`expr $count + 1`
done
echo " "
export welcome
welcome
#echo -e "\033[01;35mWelcome \033[01;95mAleksandr \033[01;95mSedelnikov\033[01;35m!\033[00;0m"
echo -e "========\033[01;38mUSERS\033[00;0m=========="
#echo "Online: $count"
count=`expr $count - 1`
echo "Online: $count"
users=`who | awk '{print $1}' | grep -v "AP103_22"  | sort -u`
if [ $count -eq 1 ]
then
echo "Name: $users"
elif [ $count -eq 0 ]
then
echo "No users online"
else
echo "Name's: "
echo $users
fi
echo "======================="
echo " "
echo -e "=========\033[01;38mInitial\033[00;0m======="
echo -e "\033[01;97m...check...\033[00;0m"
sleep 1
if [ -e ~/testing_page ] # testing_page
then
echo -e "\033[01;97mtesting_page\033[00;0m \033[01;92mgood\033[00;0m"
else
echo -e "\033[01;93mВНИМАНИЕ!\033[00;0m \033[01;97mВаша директория была очищена, восстановление...\033[00;0m"
mkdir ~/testing_page && chmod 700 ~/testing_page
echo -e "\033[01;97mtesting_page\033[00;0m \033[01;92mcreated\033[00;0m"
fi
if [ -e ~/logs ] # logs
then
echo -e "\033[01;97mlogs\033[00;0m \033[01;92mgood\033[00;0m"
else
mkdir ~/logs && chmod 700 ~/logs
echo -e "\033[01;97mlogs\033[00;0m \033[01;92mcreated\033[00;0m"
fi
if [ -e ~/README.md ]
then
echo -e "\033[01;97mFile README.md\033[00;0m \033[01;92mgood\033[00;0m"
else
date=`date | awk '{print $3" "$2" "$6" "$4}'`
echo -e "# Директория со всеми файлами и папками с сервера Ubuntu, которые были созданы на предмете "Операционные системы"\nПоследнее восстановление директории от $date" > README.md
chmod 600 ~/README.md
echo -e "\033[01;97mFile README.md\033[00;0m \033[01;92mcreated\033[00;0m"
fi
echo "======================="
echo " "
echo -e "=========\033[01;38mLogs\033[00;0m==========" 
date=`date | awk '{print $2}'`
if [ "$date" == "дек" ]
then
last > ~/logs/last_december.log
echo -e "last_december.log \033[01;92mupd\033[00;0m."
else
last > ~/logs/last_january.log
echo -e "last_january.log \033[01;92mupd\033[00;0m."
fi
echo "======================="
echo " "
war=`ps -A | grep "kswapd0" | grep -v "27" | awk '{print $1" "$3" "$4}'`
if [ "$war" != "" ]
then
echo -e "========\033[01;31mWARNING\033[00;0m========"
echo -e "\033[01;33mЗадетекчен майнер.\033[00;0m"
echo "Информация:"
IFC= 
read -r i1 i2 i3 <<< "$war"
echo -e "ID process: $i1\nWork time: $i2\nName: $i3"
fi
datetime=`date | awk '{print $2" "$3}'`
if [ "$datetime" == "янв 1" ]
then
echo -e "\033[01;92mC Новым \033[01;93m2023\033[00;0m \033[01;92mгодом!\033[00;0m"
fi
#echo -e "========\033[01;33mSession\033[00;0m========"
#loginctl user-status
#echo "======================="
#HOME="/home/AP103_22/testing_page"
HOME="/home/AP103_22"
#PS1="\033[95;1maleksandrsedelnikov@\h:\w$ \033[0m"
PS2="\033[35;1mОжидание ввода продолжения команды...\nЕсли Вы ошибочно это сделали, то нажмите сочетание клавиш:\n\033[91mCtrl+C\033[35;1m\nНачните вводить: \033[0m"
PATH=/usr/bin:/bin:/sbin
if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;97m\]\aleksandrsedelnikov[\033[00;0m\]\[\033[01;91m\]@\[\033[01;93m\]\h\>\t\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;97m\]aleksandrsedelnikov\[\033[00;0m\]\[\033[01;91m\]@\[\033[01;93m\]\h[\t]\[\033[00m\]:\w\$ '
fi
unset color_prompt force_color_prompt

# clear - cls
alias cls='clear'

# git add - gd
alias gd='git add .'

# git push - gp
alias gp='git push'

# git fast push - gfp
alias gfp='git add . && git commit -m "refresh files" && git push'

# welcome
alias welcome='echo -e "\033[01;97mПривет, \033[00;0m\033[01;93mAleksandr Sedelnikov\033[00;0m"'

# ls -l - lsl
alias lsl='ls -l'

# history
export HISTTIMEFORMAT='%F %T '
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r;"