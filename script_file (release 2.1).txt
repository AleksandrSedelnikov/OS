#RELEASE 2.1 (количество строчек: 137)

# Изменения по сравнению с release 2.0:
# 1)Коды ошибок были вынесены из функции скрипта (стали глобальными)

# САМ КОД

# глобальные переменные
	per=1 # переменная разрешения входа в цикл while(если равна 1: бесконечный цикл, 0: конец выполнения скрипта)
	error=0 # переменная подсчёта общего количества ошибок
	error_01=0 # переменная подсчёта количества ошибок с кодом 01
	error_02=0 # переменная подсчёта количества ошибок с кодом 02
	error_03=0 # переменная подсчёта количества ошибок с кодом 03
	error_04=0 # переменная подсчёта количества ошибок с кодом 04
	error_usl=0 # переменная подсчёта количества ошибок с кодом wrong usl
	code_executed0=0 # переменная подсчёта количества решений пользователя не добавлять пустую строчку в файл


# коды ошибок
	code_01=`echo "INFO: ошибка при выполнении проверки СФ, точнее: Код 01 вызывается(был вызван) в случае срабатывания проверки(полученный ответ дал пустой ответ) на существования файла(ов) в системе."`
	code_02=`echo "INFO: ошибка при выполнении проверки ЕП, точнее: Код 02 вызывается(был вызван) в случае срабатывания проверки(полученный ответ дал больше одного пути) на единичность пути к файлу(ам)."`
	code_03=`echo "INFO: ошибка при выполнении проверки КВП, точнее: Код 03 вызывается(был вызван) в случае срабатывания проверки(полученный ответ дал либо 0 или больше 2-х введенных параметров) на количество введенных параметров."`
	code_04=`echo "INFO: ошибка при выполнении проверки ДПТвФ, точнее: Код 04 вызывается(был вызван) в случае срабатывания проверки(полученный ответ был пустым или не yes,no) на добавление пустого текста в файл."`
	code_wrong_usl=`echo "INFO: ошибка при выполнении проверки У, точнее: Код wrong usl вызывается(был вызван) в случае срабатывания проверки(получения пустого или отличного от y и n ответа) на условие повторения скрипта."`
	# коды поведения скрипта при определенных решениях пользователя
	code_executed=`echo "INFO: завершение выполнения скрипта при добавлении пустого текста в файл, точнее: Код executed вызывается(был вызван) в случае получения ответа на решение(ответ на решение был no) не добавлять пустую строчку в файл."`
# функция скрипта
function script() {

	# выполнение основного скрипта
	x=$(echo $parametr | wc -w) # количество введённых параметров
	if [ "$x" != "1" ] && [ "$x" != "2" ] # проверка на количество параметров: 1 или 2 - продолжение выполнения скрипта, 0 или больше 2 - запрещение выполнения скрипта
		then 
		echo "Error code stopped script: 03" # ошибка при выполнении проверки введенных параметров
		echo "$code_03" # вызов информации об ошибке
		error=`expr $error + 1`
		error_03=`expr $error_03 + 1`
	else
		case $x in # массив команд для одного или двух параметров
		"1") # введен один параметр
			parametr_1=`find ~ -name $parametr -type f 2>~/error` # поиск пути(ей) до файла с параметром
			proverka1=`find ~ -name $parametr -type f 2>~/error | wc -l` # подсчёт количества путей до файла с параметром
			if [ "$parametr_1" != "" ] # проверка существования файла с параметром
			then
				if [ "$proverka1" == 1 ] # проверка единичности пути к файлу
				then
					echo "Введите текст: "; read text # ввод текста 
					if [ "$text" != "" ]
						then
							echo "Введённый Вами текст был добавлен в файл с параметром"
							echo "$text" >> $parametr_1 # добавление введенного текста в конец файла с именем параметра
						else
							echo "Введённый Вами текст не содержит символов, хотите добавить пустую строчку?"
							echo "Если да - y, если нет - n"; read resh
							if [ "$resh" == "y" ]
								then
									echo "Введённый Вами текст был добавлен в файл с параметром"
									echo "$text" >> $parametr_1 # добавление введенного текста в конец файла с именем параметра
								elif [ "$resh" == "n" ]
									then
										echo "Users desicion stopped script: executed" # прекращение работы скрипта из-за выбора пользователем не добавлять пустой текст
										echo "$code_executed"
										code_executed0=`expr $code_executed0 + 1`
								else
									echo "Error code stopped script: 04" # ошибка при проверки ввода пользователем решения по добавлению пустого текста в файл
                                                                        echo "$code_04" # вызов информации об ошибке
									error=`expr $error + 1`
									error_04=`expr $error_04 + 1`

							fi
					fi
				else
					echo "Error code stopped script: 02" # ошибка при выполнении проверки ЕП
					echo "$code_02" # вызов информации об ошибке
					error=`expr $error + 1`
					error_02=`expr $error_02 + 1`
				fi
			else
				echo "Error code stopped script: 01" # ошибка при выполнении проверки СФ
				echo "$code_01" # вызов информации об ошибке
				error=`expr $error + 1`
				error_01=`expr $error_01 + 1`
			fi
		;;
		"2") # введено два параметра
			parametr1=(${parametr}) # создание массива параметров
			parametr1_1=`find ~ -name ${parametr1[0]} -type f 2>~/error` # поиск пути(ей) до файла под первым параметром
			parametr1_2=`find ~ -name ${parametr1[1]} -type f 2>~/error` # поиск пути(ей) до файла под вторым параметром
			proverka2=`find ~ -name ${parametr1[0]} -type f 2>~/error | wc -l` # подсчёт количества путей до файла с первым параметром
			proverka3=`find ~ -name ${parametr1[1]} -type f 2>~/error | wc -l` # подсчёт количества путей до файла с вторым параметром
			if [ "$parametr1_1" != "" ] && [ "$parametr1_2" != "" ] # проверка существования файла с первым и вторым параметром
			then
				if [ "$proverka2" == 1 ] && [ "$proverka3" == 1 ] # проверка единичности пути файлов
				then
				echo "Слова из файла под вторым параметром добавлены в файл с первым параметром"
				cat $parametr1_2 >> $parametr1_1 # добавление информации из файла под вторым параметра в файл под первым параметром
				else
					echo "Error code stopped script: 02" # ошибка при выполнении проверки ЕП
					echo "$code_02" # вызов информации об ошибке
					error=`expr $error + 1`
					error_02=`expr $error_02 + 1`
				fi
			else
				echo "Error code stopped script: 01" # ошибка при выполнении проверки СФ
				echo "$code_01" # вызов информации об ошибке
				error=`expr $error + 1`
				error_01=`expr $error_01 + 1`
			fi
		;;
		esac
	fi 

	echo "Хотите продолжить выполнение кода?(y - да, n - нет): "; read usl
	if [ "$usl" == "y" ]
		then
			per1=1
		elif [ "$usl" == "n" ]
			then
				per1=0
		else
			per1=1
			echo "Error: wrong usl"
			echo "$code_wrong_usl"
			error_usl=`expr $error_usl + 1`
			error=`expr $error + 1`
	fi


}


while [ "$per" != 0 ] # цикл выполнения функции скрипта(пока решение равно 1 - выполняется, если 0 - заканчивает выполнение)
        do
        echo "Введите один или два параметра: "; read parametr # вводится(ятся) параметр(ы)
        script $parametr # отправляется(ются) параметр(ы) в фунцию скрипта
	per=$per1
	done
echo "Script has been finished working." # скрипт завершил свою работу удачно
echo "В ходе выполнения скрипта выявлено ошибок: "$error"." # общее количество ошибок до полного завершения работы скрипта
echo "Количество ошибок с кодом 01: "$error_01"." # количество ошибок с кодом 01 до полного завершения работы скрипта
echo "Количество ошибок с кодом 02: "$error_02"." # количество ошибок с кодом 02 до полного завершения работы скрипта
echo "Количество ошибок с кодом 03: "$error_03"." # количество ошибок с кодом 03 до полного завершения работы скрипта
echo "Количество ошибок с кодом 04: "$error_04"." # количество ошибок с кодом 04 до полного завершения работы скрипта
echo "Количество ошибок с кодом wrong usl: "$error_usl"." # количество ошибок с кодом wrong_usl до полного завершения работы скрипта
echo "В ходе выполнения скрипта выявлено решений пользователя не добавлять пустую строчку: "$code_executed0"." # количество решений пользователя с кодом executed до полного завершения работы скрипта
